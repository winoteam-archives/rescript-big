// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Big = require("../src/Big.bs.js");
var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

Jest.describe("Big.js bindings from ReasonML / Ocaml", (function (param) {
        Jest.test("big(2.0) is just equals to float(2.0)", (function (param) {
                return Curry._2(Jest.Expect.Operators.$eq$eq, Jest.Expect.expect(Big.float_of_big(Big.big(2.0))), 2.0);
              }));
        Jest.test("big(2.0) is just equals to float(2.0)", (function (param) {
                return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Big.plus(Big.big(2.0), Big.big(3.0))), Big.big(5.0));
              }));
        Jest.test("big(2.0) +. big(5.2) +. big(0.3) should be equals to float(7.5)", (function (param) {
                return Curry._2(Jest.Expect.Operators.$eq$eq, Jest.Expect.expect(Big.float_of_big(Big.Operators.$plus$dot(Big.Operators.$plus$dot(Big.big(2.0), Big.big(5.2)), Big.big(0.3)))), 7.5);
              }));
        Jest.test("big(2.0) *. big(3.0) should be equals to big(6.0)", (function (param) {
                return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Big.Operators.$star$dot(Big.big(2.0), Big.big(3.0))), Big.big(6.0));
              }));
        return Jest.test("big(2020.2065) *. big(3.0) $. 2 should be equals to big(6060.62)", (function (param) {
                      return Curry._2(Jest.Expect.Operators.$eq, Jest.Expect.expect(Big.big(Caml_format.caml_float_of_string(Big.Operators.$$dot(Big.Operators.$star$dot(Big.big(2020.2065), Big.big(3.0)), 2)))), Big.big(6060.62));
                    }));
      }));

/*  Not a pure module */
